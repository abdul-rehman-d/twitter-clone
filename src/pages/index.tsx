import { SignInButton, useUser } from "@clerk/nextjs";
import Head from "next/head";
import Image from "next/image";
import { type NextPage } from "next";
import { useState, type FormEvent } from "react";

import { api, type RouterOutputs } from "~/utils/api";

import dayjs from 'dayjs'
import relativeTime from 'dayjs/plugin/relativeTime'
import { LoaderSpinner, LoadingPage } from "~/components/loading";
import { toast } from "react-hot-toast";

dayjs.extend(relativeTime)

type PostWithAuthor = RouterOutputs["post"]["getAll"][number]

const CreatePost = () => {
  const { user } = useUser();

  const [input, setInput] = useState<string>('');

  const ctx = api.useContext()

  const { mutate, isLoading: isPosting } = api.post.create.useMutation({
    onSuccess: () => {
      setInput('')
      void ctx.post.getAll.invalidate()
    },
    onError: (err) => {
      const errorMessage = err.data?.zodError?.fieldErrors.content
      if (errorMessage && errorMessage[0]) {
        toast.error(errorMessage[0])
      } else {
        toast.error('Something went wrong. Please try again later!')
      }
    }
  })

  if (!user) return null;

  const handleSubmit = (e: FormEvent) => {
    e.preventDefault();
    if (input) {
      mutate({
        content: input,
      })
    }
  }

  return (
    <form onSubmit={handleSubmit} className="flex flex-row px-4 gap-x-2 py-2 border-b border-slate-400">
      <div className="bg-slate-400 rounded-full w-12 h-12 overflow-hidden relative">
        <Image
          src={user.profileImageUrl}
          alt={user.fullName || 'User Profile Picture'}
          fill
        />
      </div>
      <div className="flex-grow flex flex-col">
        <input
          type="text"
          name="tweet"
          id="tweet"
          value={input}
          onChange={(e) => {
            setInput(e.target.value)
          }}
          placeholder="What's Happening?"
          className="text-md bg-transparent focus-visible:outline-none p-2 block"
          required
          disabled={isPosting}
        />
        <div className="flex flex-row justify-end">
          {!!isPosting &&
            <div className="h-fit self-center"><LoaderSpinner size={24} /></div>
          }
          <button
            className="px-4 py-2 text-md bg-sky-500 rounded-3xl"
            type="submit"
            disabled={isPosting}
          >Tweet</button>
        </div>
      </div>
    </form>
  )
}

const PostView = (props: {post: PostWithAuthor}) => {
  const { post, author } = props.post
  return (
    <div className="flex flex-row p-4 gap-x-4 border-b border-slate-400">
      <div className="bg-slate-400 rounded-full w-12 h-12 overflow-hidden relative">
        <Image
          src={author.profileImageUrl}
          alt={author.username}
          fill
        />
      </div>
      <div className="flex-grow flex flex-col mb-4">
        <div className="text-slate-300">
          <span>{`@${author.username}`}</span>
          {' Â· '}
          <span className="font-thin">{dayjs(post.createdAt).fromNow()}</span>
        </div>
        <p className="text-xl">{post.content}</p>
      </div>
    </div>
  )
}

const Feed = () => {
  const { data, isLoading: postsLoading } = api.post.getAll.useQuery()

  if (postsLoading)
    return <div className="pt-52 flex"><LoaderSpinner size={30} /></div>

  if (!data)
    return <div>Something went wrong</div>

  return (
    <div className="flex flex-col">
      {
        data.map((post) => (
          <PostView key={post.post.id} post={post} />
        ))
      }
    </div>
  )
}

const Home: NextPage = () => {
  const {
    isSignedIn: userSignedIn,
    isLoaded: userLoading
  } = useUser()

  // since React Query fetches only once, calling this in Page Component
  // makes sure React Query fetches the data ASAP
  api.post.getAll.useQuery()


  if (!userLoading) return <LoadingPage />

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex justify-center min-h-screen">
        {userSignedIn
          ? (
            <div className="w-full md:max-w-2xl border-x border-slate-400 relative">
              <div className="border-b border-slate-400 p-4 sticky top-0 z-40 backdrop-blur-3xl supports-backdrop-blur:bg-white/95s">
                <h1 className="font-semibold text-xl">Home</h1>
              </div>
              <CreatePost />
              <Feed />
            </div>
          )
          : (
            <div className="w-full h-screen flex justify-center items-center">
              <div className="px-4 py-2 text-md bg-sky-500 rounded-3xl font-semibold">
                <SignInButton />
              </div>
            </div>
          )
        }
      </main>
    </>
  );
};

export default Home;
